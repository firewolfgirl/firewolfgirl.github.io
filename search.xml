<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[七牛教程]]></title>
    <url>%2F2018%2F10%2F17%2F%E4%B8%83%E7%89%9B%E6%95%99%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[大二暑假在一次项目中接触到七牛云（云服务平台），它的云存储服务感觉非常不错。现在重新整理总结其使用心得。 注册不多说什么。 登录 创建对象存储 查看创建好的空间 文件上传，复制文件链接 此步不设置前缀也可，但推荐设置。原因如下：众所周知， 七牛云存储的服务端是一个 key-value 系统，非树形结构，因此也就没有“目录”或者“文件夹”的概念。如果文件很多，都混合在一起，那么对于它们的管理、查找与使用会很不方便。那在七牛云如何模拟文件夹对文件进行分类呢？管理控制台提供了一种模拟文件夹的手段：在资源名（Key）中使用“/”符号（斜杠符）。也就是在上传时为所有文件指定一个前缀，以模拟出文件夹效果。这样，以后在查找你需要的文件时，可以使用前缀直接搜索。 图中说明： Images/jpg/blogs/qiniuyun/1/ 图片 jpg格式的 博客中的 关于七牛云的 第1篇博客的 Documents/word（txt）/ 文档 格式 Videos 视频 Audios 音频]]></content>
      <categories>
        <category>blogs</category>
      </categories>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo常用指令]]></title>
    <url>%2F2018%2F10%2F10%2FHexo%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[以下关于Hexo常用指令的整理，要想熟练使用一个工具，首先就要熟练掌握他的相关指令，以便操控这一工具。 新建文章1hexo new articleName Note： 新建一篇题为“articleName”的文章，此时会在E/Hexo/source/_posts/目录下生成一份articleName.md 的文件，使用Notepad++、小书匠、MarkdownPad2等编辑工具打开即能书写； 提示信息：INFO Created: E:\Hexo\source_posts\articleName.md 如果标题包含空格，需要使用双引号括起来 新建页面1hexo new page pageName Note： 新建一个题为“pageName”的页面，此时会在E:\Hexo\source\目录下生成一个名为pageName的文件夹，其中包含一份 index 的md文件； 提示信息：INFO Created: E:\Hexo\source\pageName\index.md 同样地，如果语句中包含空格，需要使用双引号括起来 生成静态页面1hexo generate Note： 启动该条指令后会将当前网页的内容生成静态页面到public目录下 提示信息：INFO Start processingINFO Files loaded in 595 msINFO 0 files generated in 612 ms 开启本地服务器端口1hexo server Note： 开启预览访问的端口，默认端口为4000 http://localhost:4000/ 关闭server使用 ctrl + c 提示信息：INFO Start processingINFO Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop. 在使用hexo server 可能会遇到端口被占用的情况，不妨使用以下指令来更改端口1hexo server -p 4001 部署到Github1hexo deploy Note： 将 E/Hexo/目录下的 .deploy_git 文件夹部署到Github 部署前需要预先 hexo generate 生成静态文件 提示信息：INFO Deploying: gitINFO Clearing .deploy_git folder…INFO Copying files from public folder……..部署的文件To git@github.com:HarbingWang/harbingwang.github.io.gitda818a3..e4e53c6 HEAD -&gt; masterINFO Deploy done: git # 当看到 “INFO Deploy done: git”时即表示部署已经完成； 清除文件1hexo clean Note： 清除E/Hexo目录下的缓存文件（db.json）和已经生成的静态文件（public）文件 网页正常情况下可以忽略此条命令 查看Hexo版本1hexo version Note： 查看当前使用的Hexo的版本号 提示信息：hexo: 3.2.0hexo-cli: 1.0.1os: Windows_NT 6.1.7601 win32 x64http_parser: 2.6.2node: 5.10.0v8: 4.6.85.31uv: 1.8.0zlib: 1.2.8ares: 1.10.1-DEVicu: 56.1modules: 47openssl: 1.0.2g 复合指令12hexo g -d hexo s -d Note： hexo g -d # 等价于 hexo generate –deploy ：生成静态文件并部署 hexo s -d # 等价于 hexo deploy –generate ：开启预览并部署到Github 简写形式12345hexo n #等价于 hexo newhexo g #等价于 hexo generatehexo s #等价于 hexo serverhexo d #等价于 hexo deployhexo v #等价于 hexo version]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>blog，Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown常用通用基础语法实践]]></title>
    <url>%2F2018%2F07%2F13%2FMarkdown%E5%B8%B8%E7%94%A8%E9%80%9A%E7%94%A8%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%AE%9E%E8%B7%B5%20%2F</url>
    <content type="text"><![CDATA[上图是本篇博客的介绍图片，显示在首页增强美感，本句话也将显示在首页。Markdown常用通用基础语法实践只有把看到的东西输出实践了 才不至于真正写起来脑子一片空白 才是懂了。没事翻出来看看 加深印象。GitHub上或者gitee上 难免要写一些readme等等的说明性文件，但是这样的文件一般都是.md的文件，编写的语法自然跟其他格式的文件有所区别。123categories:- 一级分类- 二级分类 介绍Markdown: 是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。 markdown其实就是一种简单的文本。 与普通的文本文件 (txt文件)不同的是: 支持一些特殊的符号，通过特殊的符号来表示不同的语义，并且给予不同的样式。 同时普通的文本文件后缀是.txt,而markdown文件的后缀是.md。 markdown 实现 的宗旨是易读易写。 通过特殊的符号实现一些基础的样式，而不同的符号也代表了不同的语义，例如#表示一级标题，##则表示二级标题。 用markdown输出标题： 一级标题title （这是h1到h6）二级标题title三级标题title四级标题title五级标题title 一般用二级标题和三级标题即可，标题没有标号只是大小不同六级 h6分隔符：就是一条横线。在一行中用三个以上的、-、_来建立一个分隔线，行内不能有其他东西。也可以在符号间插入空格。分割线可以由 - _（星号，减号，底线）这3个符号的至少3个符号表示，注意至少要3个，且不需要连续，有空格也可以 前面有用到星号，建议用减号 文本样式：粗体和斜体常用于表示强调斜体：斜体文本斜体文本粗体：加粗就是是文字为粗体显示，可以使用下面两种方式表示：粗体文本粗体文本斜粗体:斜粗体文本 斜粗体文本斜粗体文本 斜粗体文本删除线:文字有一条删除线的效果1~~删除效果~~ 删除效果高亮:文字用醒目的高亮显示这是高亮文本效果。 转义 \ ` ~ * _ - + . ! 代码(框)代码分为行内代码（单行用）和代码块（多行用）。121. 行内代码使用 `代码` 标识，可嵌入文字中2. 代码块使用4个空格或```标识 1这里是代码 13. 代码语法高亮在 ```后面加上语言名称即可 1这里是代码 例如： 这是行内代码onCreate(Bundle savedInstanceState)的例子。 这是代码块和语法高亮： 1234protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main);&#125; 代码块代码块就是将源码直接进行展示，可在开始的三反点后面加上代码语种名称。 12var str = "hello world!";alert(str); 1$ hexo new "My New Post" 12345@requires_authorizationdef somefunc(param1='', param2=0): if param1 &gt; param2: print 'Greater' return (param2 - param1 + 1) or None 图片图片展示 链接链接根据链接目标可分为站内站外链接，按照类型可分为文本链接和图片链接。综上所述，可分为以下三种：一.文本链接：给文本信息添加超链接1.https://firewolfgirl.github.io/2.文本链接 文本链接3. 图片与链接：此处查看源文件理解回顾图片与链接的语法很像，区别在一个 ! 号。二者格式：12图片：![]() ![图片文本(可忽略)](图片地址)链接：[]() [链接文本](链接地址) 链接又分为行内式、参考式和 自动链接：12345678910111213这是行内式链接：[fire wolf girl&apos;s Blog](https://firewolfgirl.github.io/)。这是参考式链接：[fire wolf girl&apos;s Blog][url]，其中url为链接标记，可置于文中任意位置。[url]: https://firewolfgirl.github.io/ &quot;fire wolf girl&apos;s Blog&quot;链接标记格式为：[链接标记文本]: 链接地址 链接title(可忽略)这是自动链接：直接使用`&lt;&gt;`括起来&lt;https://firewolfgirl.github.io/&gt;这是图片：![][avatar][avatar]: https://connorlin.github.io/images/avatar.jpg 效果如下：这是行内式链接：fire wolf girl’s Blog。 这是参考式链接：fire wolf girl’s Blog，其中url为链接标记，可置于文中任意位置。 链接标记格式为：[链接标记文本]: 链接地址 链接title(可忽略) 这是自动链接：直接使用&lt;&gt;括起来https://firewolfgirl.github.io/ 这是图片： 链接支持2种链接方式：行内式和参数式，不管是哪一种，链接文字都是用 [方括号] 来标记。 行内式[百度百科]（https://baike.baidu.com）是什么意思上图可知，行内式的链接格式是：链接的文字放在[]中，链接地址放在随后的（）中，举一反三，经常出现的列表链接就应该这样写： 下面是带链接的列表 百度百科 百度链接还可以带title属性，好像也只能带title，带不了其他属性，注意，是链接地址后面空一格，然后用引号引起来,具体见上面示例。参数式的怎么写： 这里是name，这里是home，这里是blog 注意中括号里的内容要一致，否则会出错。理解：就是把链接当成参数，适合多出使用相同链接的场景，注意参数的对应关系，参数定义时，这3种写法都可以：[foo]: http://example.com/ “Optional Title Here”[foo]: http://example.com/ ‘Optional Title Here’[foo]: http://example.com/ (Optional Title Here)还支持这种写法，如果你不想混淆的话：[foo]: http://example.com/ “Optional Title Here” 其实还有一种隐式链接的写法，但是我觉得那种写法不直观，所以就不写了，经常用的一般就上面2种。 图片图片也有2种方式：行内式和参数式， 参数式图片，这里是 用法跟链接的基本一样，唯一的不同就是，图片前面要写一个！（这是必须的），没什么好说的 列表:列表分为有序和无序两种。 无序列表无序列表有三种表示方法：* 、 + 和 -。注意：下级在上级基础上前面多加两个空格，符号与内容直接有一个空格。无序列表1： 一级条目1 一级条目2 二级条目1 二级条目2 三级条目1 三级条目2 三级条目3 二级条目3 一级条目3 在这里只演示一种，另外两种就是把 * 分别换成 + 和 - 。 有序列表有序列表与无序列表类似，只不是是将前面的符号换成数字接着一个英文句点而已。 一级条目1 一级条目2 二级条目1 二级条目2 三级条目1 三级条目2 三级条目3 二级条目3 一级条目3 说明：有序列表有自动纠错功能，当序号输入错误时，会自动更正显示序号。有序列表可结合无序列表，只在第一个条目输入序号后，同级条目会自动编号。 引用引用内容可以嵌套引用和使用其他语法，在引用内容后面空一行就表示引用结束。 这是一段包含加粗的 _斜体_ 和 斜粗体 并带有高亮显示的一段文本来自我的Github。区块引用内列表内容如下： 内容1 内容2 内容3 反斜杠的作用在markdown中，存在一些特殊的字符，具有一定的语法意义，例如#表示标题等等，那么在文字编辑的时候想要输出这些特殊的字符不能够直接输出，而是应该使用\转义。如下：# 引用 嵌套引用 表格:表格对齐格式:123居左：:----居中：:----:或-----居右：----: 例子： 标题 标题 标题 居左测试文本 居中测试文本 居右测试文本 居左测试文本1 居中测试文本2 居右测试文本3 居左测试文本11 居中测试文本22 居右测试文本33 居左测试文本111 居中测试文本222 居右测试文本333 表格的格式不一定要对的非常齐，但是为了好看，对齐肯定是最好的。分割线后面的冒号表示对齐方式，写在左边表示左对齐，右边为右对齐，两边都写表示居中。 Tables Are Cool col right-aligned $1600 co centered $12 zebra are neat $1 Tables Are Cool col 3 is right-aligned $1600 col 2 is centered $12 zebra stripes are neat $1 引用:引用以&gt;来表示，引用中支持多级引用、标题、列表、代码块、分割线等常规语法。常见的引用写法： 这是一段引用 //在&gt;后面有 1 个空格 这是引用的代码块形式 //在`&gt;`后面有 5 个空格 代码例子： protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); } 一级引用 二级引用 三级引用 上图可以看出，想要在上一次引用中嵌套一层引用，只需多加一个&gt;，理论上可以无限嵌套，我就不整那么多了，注意：多层嵌套的&gt;是不需要连续在一起的，只要在一行就可以了，中间允许有空格，但是为了好看，还是把排版搞好吧 这是一个四级标题 这是第一行列表项 这是第二行列表项 标题 书籍是人类进步的阶梯 这是高尔基说的 前方高能预警 注意：这里是为了提醒前面有很刺激的事情发生，请做好准备 下面内容是一些应用示例 作者：seay链接：https://www.jianshu.com/來源：简书 Markdown编辑器。特点概述： 功能丰富 ：支持高亮代码块，工作学习好帮手； 得心应手 ：简洁高效的编辑器，支持移动端 Web； 深度整合 ：轻松管理。 Markdown简介 Markdown 是一种轻量级标记语言 维基百科它使用简单的符号标识不同的标题，将某些文字标记为粗体或者斜体，创建一个链接。 表格 Item Value Qty Computer 1600 USD 5 Phone 12 USD 12 Pipe 1 USD 234 复选框使用 - [ ] 和 - [x] 语法可以创建复选框，实现 todo-list 等功能。例如： 已完成事项 待办事项1 待办事项2 快捷键加粗 Ctrl + B插入图片 Ctrl + G插入链接 Ctrl + L 需要续费 微博：@马克飞象，@GGock 邮箱：&#x68;&#117;&#x73;&#116;&#103;&#x6f;&#x63;&#x6b;&#64;&#x67;&#109;&#x61;&#x69;&#108;&#x2e;&#99;&#x6f;&#109;]]></content>
      <categories>
        <category>blogs</category>
      </categories>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F07%2F08%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <categories>
        <category>blogs</category>
      </categories>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
</search>
